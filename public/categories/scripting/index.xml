<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on John Fabry</title>
    <link>https://johnfabry.azurewebsites.net/categories/scripting/</link>
    <description>Recent content in Scripting on John Fabry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jun 2015 15:29:00 +0000</lastBuildDate>
    <atom:link href="https://johnfabry.azurewebsites.net/categories/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PowerShell Reference Types And Value Types</title>
      <link>https://johnfabry.azurewebsites.net/2015/06/26/powershell-reference-types-and-value-types</link>
      <pubDate>Fri, 26 Jun 2015 15:29:00 +0000</pubDate>
      
      <guid>https://johnfabry.azurewebsites.net/2015/06/26/powershell-reference-types-and-value-types</guid>
      <description>&lt;p&gt;A coworker and I ran into something of an oddity yesterday that started the snowball rolling on some research digging into the guts of how PowerShell operates as a langauge. Let me say up front that, with as much as Microsoft is working to make PowerShell the de facto scripting language on Windows, it&amp;rsquo;s both surprising and frustrating how little is published in the way of official documentation. While there&amp;rsquo;s a lot of good stuff people are writing it&amp;rsquo;s always in blogs of Stack Overflow discussions. Microsoft doesn&amp;rsquo;t, at least at the time of this writing, have any official documentation like what I&amp;rsquo;d reference for &lt;a href=&#34;http://ruby-doc.org/core-2.2.1/&#34;&gt;Ruby&lt;/a&gt; or &lt;a href=&#34;http://perldoc.perl.org/perlapi.html&#34;&gt;Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The behavior which kicked off our confusion was how PowerShell handles passing parameters to functions. Take this very simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Test
{
    param($Value)
    $Value *= 2
}

$number = 3
Test -Value $number
$number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this is just 3. The reason is that when I pass &lt;strong&gt;$number&lt;/strong&gt; to the &lt;strong&gt;Test&lt;/strong&gt; function, it&amp;rsquo;s a &lt;em&gt;copy&lt;/em&gt; of the value. Thus &lt;strong&gt;$number&lt;/strong&gt; never changes. The behavior is different, however, when I pass an object. Take this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Test
{
    param($Value)
    $Value.Add(&amp;quot;Hello!&amp;quot;)
}

$something = New-Object System.Collections.ArrayList
Test -Value $something
$something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value printed to the screen here is &amp;ldquo;Hello!&amp;rdquo;. The difference is that &lt;strong&gt;$something&lt;/strong&gt; is being modified eventhough it&amp;rsquo;s being passed to the function. That clearly &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; happen when passing a non-object. What gives?&lt;/p&gt;

&lt;p&gt;After quite a bit of digging, I failed miserably at finding anything of substance about this topic as it relates to PowerShell. That being said, I was able to find some very &lt;em&gt;good&lt;/em&gt; information on the topic as it relates to C#, the language used to create PowerShell. In particular this &lt;a href=&#34;http://stackoverflow.com/questions/23041297/why-are-objects-automatically-passed-by-reference&#34;&gt;Stack Overflow&lt;/a&gt; thread and this &lt;a href=&#34;http://www.yoda.arachsys.com/csharp/parameters.html&#34;&gt;article&lt;/a&gt; really helped to clear things up for me.&lt;/p&gt;

&lt;p&gt;If you want the super detailed explanation, read the content at those links. If you want the short version, however, read on. In C# there are two main sorts of variables: value types and reference types. For value type variables, the value of the variable is the data itself. In my first example, &lt;strong&gt;$number&lt;/strong&gt; is a value type, and that means the value of it is 3. Reference types are different. For anything which is a reference type, the value of the variable is a &lt;em&gt;reference&lt;/em&gt; to the data. So in my second example, &lt;strong&gt;$something&lt;/strong&gt; has a value which is simply a reference to where the ArrayList lives. That&amp;rsquo;s why passing &lt;strong&gt;$something&lt;/strong&gt; to a function changes what &lt;strong&gt;$something&lt;/strong&gt; actually contains; it&amp;rsquo;s a reference that is being passed and the original data is being changed!&lt;/p&gt;

&lt;p&gt;To simplify this a bit I can take functions out of the equation entirely. Consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$first = New-Object System.Collections.ArrayList
$second = $first
$second.Add(&amp;quot;Hello!&amp;quot;)
$first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this is &amp;ldquo;Hello!&amp;rdquo;. When I set &lt;strong&gt;$second&lt;/strong&gt; equal to &lt;strong&gt;$first&lt;/strong&gt;, I&amp;rsquo;m setting &lt;strong&gt;$second&lt;/strong&gt; equal to the reference to where the data of &lt;strong&gt;$first&lt;/strong&gt; lives. Since &lt;strong&gt;$first&lt;/strong&gt; and &lt;strong&gt;$second&lt;/strong&gt; both reference the &lt;em&gt;same thing&lt;/em&gt;, adding new data to &lt;strong&gt;$second&lt;/strong&gt; means that &lt;strong&gt;$first&lt;/strong&gt; is now different as well!&lt;/p&gt;

&lt;p&gt;After realizing that this is how C# functions, it makes &lt;em&gt;much&lt;/em&gt; more sense why PowerShell behaves the way it does. As a further test, I wanted to see if I could emulate the same behavior in PowerShell by using the &lt;code&gt;ref&lt;/code&gt; keyword that C# leverages to pass primitives as references. Sure enough, that&amp;rsquo;s possible as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Test
{
    param([ref]$Value)
    $Value.Value *= 2
}

$number = 3
Test -Value ([ref]$number)
$number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing this gives me a value of 6. By using the &lt;code&gt;ref&lt;/code&gt; keyword, I&amp;rsquo;m able to pass a reference to the function just like I would in C#. Thus the actual data stored by what &lt;strong&gt;$number&lt;/strong&gt; references is now changed. Note that when performing the operation inside of my function, however, I can&amp;rsquo;t just do that against &lt;strong&gt;$Value&lt;/strong&gt;. The reason for this is that &lt;strong&gt;$Value&lt;/strong&gt; is &lt;em&gt;only a reference&lt;/em&gt;. If I want to do something against its data, I need to act on it&amp;rsquo;s &lt;strong&gt;Value&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;Hopefully someone else stumbles across this post and is saved from having to spend a bit of time hunting for an explanation if they notice the same behavior in PowerShell that we did.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>